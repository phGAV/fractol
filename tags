!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AR	Makefile	/^AR := ar$/;"	m
AR	libft/Makefile	/^AR := ar$/;"	m
ARROW_DOWN	include/key.h	/^# define ARROW_DOWN	/;"	d
ARROW_LEFT	include/key.h	/^# define ARROW_LEFT	/;"	d
ARROW_RIGHT	include/key.h	/^# define ARROW_RIGHT	/;"	d
ARROW_UP	include/key.h	/^# define ARROW_UP	/;"	d
BLACK	include/fractol.h	/^# define BLACK	/;"	d
BUFF_SIZE	libft/include/get_next_line.h	/^# define BUFF_SIZE /;"	d
BUILD	Makefile	/^BUILD := build$/;"	m
BUILD	libft/Makefile	/^BUILD := build$/;"	m
BURN_SHIP	include/fractol.h	/^	BURN_SHIP,$/;"	e	enum:e_type
BUTTON_PRESS	include/key.h	/^# define BUTTON_PRESS	/;"	d
BUTTON_RELEASE	include/key.h	/^# define BUTTON_RELEASE	/;"	d
C	include/key.h	/^# define C	/;"	d
CC	Makefile	/^CC := clang$/;"	m
CC	libft/Makefile	/^CC := clang$/;"	m
CFLAGS	Makefile	/^CFLAGS := $(WFLAGS) $(OFLAGS) -fPIC -MMD -I.\/$(INCLUDE) -I.\/$(LIBFT_INCLUDE) -I.\/$(MLX_DIR)$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS := $(WFLAGS) $(OFLAGS) -fPIC -MMD -I.\/$(INCLUDE)$/;"	m
DEP	Makefile	/^DEP := $(OBJ:%.o=%.d)$/;"	m
DEP	libft/Makefile	/^DEP := $(OBJ:%.o=%.d)$/;"	m
DESTROY_NOTIFY	include/key.h	/^# define DESTROY_NOTIFY	/;"	d
ENOINDEX	libft/include/vec.h	/^# define ENOINDEX /;"	d
ERRORS_H	include/errors.h	/^# define ERRORS_H$/;"	d
ERR_THREADS	include/errors.h	/^# define ERR_THREADS	/;"	d
ESC	include/key.h	/^# define ESC	/;"	d
EXIT_TIME	include/fractol.h	/^# define EXIT_TIME	/;"	d
F	include/key.h	/^# define F	/;"	d
FONT_HEIGHT	minilibx_macos/mlx_int.h	/^#define	FONT_HEIGHT	/;"	d
FONT_WIDTH	minilibx_macos/mlx_int.h	/^#define FONT_WIDTH	/;"	d
FRACTOL_H	include/fractol.h	/^# define FRACTOL_H$/;"	d
GET_NEXT_LINE_H	libft/include/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
GL_SILENCE_DEPRECATION	minilibx_macos/mlx_new_window.h	/^#define GL_SILENCE_DEPRECATION$/;"	d
GL_SILENCE_DEPRECATION	minilibx_macos/mlx_shaders.c	/^#define GL_SILENCE_DEPRECATION$/;"	d	file:
INCLUDE	Makefile	/^INCLUDE := include$/;"	m
INCLUDE	libft/Makefile	/^INCLUDE := include$/;"	m
INTERNAL_H	libft/src/vec/internal.h	/^# define INTERNAL_H$/;"	d
JULIA	include/fractol.h	/^	JULIA,$/;"	e	enum:e_type
KEYBOARD_MAX	include/key.h	/^# define KEYBOARD_MAX	/;"	d
KEY_H	include/key.h	/^# define KEY_H$/;"	d
KEY_PRESS	include/key.h	/^# define KEY_PRESS	/;"	d
KEY_RELEASE	include/key.h	/^# define KEY_RELEASE	/;"	d
LIBFT_DIR	Makefile	/^LIBFT_DIR := libft$/;"	m
LIBFT_H	libft/include/libft.h	/^# define LIBFT_H$/;"	d
LIBFT_INCLUDE	Makefile	/^LIBFT_INCLUDE := $(LIBFT_DIR)\/include$/;"	m
LIBFT_LIB	Makefile	/^LIBFT_LIB := $(LIBFT_DIR)\/libft.a$/;"	m
MANDELBAR	include/fractol.h	/^	MANDELBAR,$/;"	e	enum:e_type
MANDELBROT	include/fractol.h	/^	MANDELBROT = 0,$/;"	e	enum:e_type
MAX_EVENT	minilibx_macos/mlx_int.h	/^#define	MAX_EVENT	/;"	d
MAX_PIXEL_NB	minilibx_macos/mlx_int.h	/^#define MAX_PIXEL_NB	/;"	d
MEMORY	include/errors.h	/^# define MEMORY	/;"	d
MINUS	include/key.h	/^# define MINUS	/;"	d
MLX_DIR	Makefile	/^MLX_DIR := minilibx_macos$/;"	m
MLX_FLAGS	Makefile	/^MLX_FLAGS := -L $(MLX_DIR) -lmlx -framework OpenGL -framework AppKit$/;"	m
MLX_H	minilibx_macos/mlx.h	/^#define	MLX_H$/;"	d
MOTION_NOTIFY	include/key.h	/^# define MOTION_NOTIFY	/;"	d
MOUSE_SCROLL_DOWN	include/key.h	/^# define MOUSE_SCROLL_DOWN	/;"	d
MOUSE_SCROLL_UP	include/key.h	/^# define MOUSE_SCROLL_UP	/;"	d
NAME	Makefile	/^NAME := fractol$/;"	m
NAME	libft/Makefile	/^NAME := libft.a$/;"	m
NAME_SHARED	libft/Makefile	/^NAME_SHARED := libft.so$/;"	m
NOM	minilibx_macos/Makefile	/^NOM=libmlx.a$/;"	m
OBJ	Makefile	/^OBJ := $(SRC:%.c=$(BUILD)\/%.o)$/;"	m
OBJ	libft/Makefile	/^OBJ := $(SRC:%.c=$(BUILD)\/%.o)$/;"	m
OBJ	minilibx_macos/Makefile	/^OBJ=$(OBJ1:.m=.o)$/;"	m
OBJ1	minilibx_macos/Makefile	/^OBJ1=$(SRC:.c=.o)$/;"	m
OCEAN	include/fractol.h	/^	OCEAN$/;"	e	enum:e_type
OFLAGS	Makefile	/^OFLAGS := -O2 -march=native$/;"	m
OFLAGS	libft/Makefile	/^OFLAGS := -O2 -march=native$/;"	m
PHOENIX	include/fractol.h	/^	PHOENIX,$/;"	e	enum:e_type
PLUS	include/key.h	/^# define PLUS	/;"	d
R	include/key.h	/^# define R	/;"	d
RANLIB	Makefile	/^RANLIB := ranlib$/;"	m
RANLIB	libft/Makefile	/^RANLIB := ranlib$/;"	m
RETURN	include/key.h	/^# define RETURN	/;"	d
RETURN	minilibx_macos/mlx_xpm.c	/^#define	RETURN	/;"	d	file:
RE_DECLARATIONS	libft/util/dumbsplit.py	/^RE_DECLARATIONS = re.compile(r'(?:^\\s*(?:\/\/|\/\\*).+\\n+)*(?:^[\\w ]+\\t+\\**(?P<name>\\w+)\\(.+?\\)(?=;\\n))', re.MULTILINE)$/;"	v
RE_DEFINITIONS	libft/util/dumbsplit.py	/^RE_DEFINITIONS = re.compile(r'(?:^\\s*(?:\/\/|\/\\*).+\\n+)*(?:^[\\w ]+\\t+\\**(?P<name>\\w+)(?:.|\\n)+?\\n}\\n)', re.MULTILINE)$/;"	v
RE_FILE	libft/util/dumbsplit.py	/^RE_FILE = re.compile(r'\\w+\\.[ch]\\s+(?=:\\+:)')$/;"	v
RE_INCLUDE	libft/util/dumbsplit.py	/^RE_INCLUDE = re.compile(r'(?:^\\s*#\\s*include.+\\n+)+', re.MULTILINE)$/;"	v
RE_INDENTEDHEADER	libft/util/dumbsplit.py	/^RE_INDENTEDHEADER = re.compile(r'^\\s*#\\s+include', re.MULTILINE)$/;"	v
RE_INDENTEDNAME	libft/util/dumbsplit.py	/^RE_INDENTEDNAME = re.compile(r'^(int\\t|[\\w ]+)\\t+')$/;"	v
RE_STDHEADER	libft/util/dumbsplit.py	/^RE_STDHEADER = re.compile(r'(?:^\/\\*.{76}\\*\/\\n){11}\\n', re.MULTILINE)$/;"	v
SATURATION	include/fractol.h	/^# define SATURATION	/;"	d
SRC	Makefile	/^SRC := main.c errors.c fractal.c fractal_bonus.c event.c control.c color.c mouse.c draw.c$/;"	m
SRC	libft/Makefile	/^SRC := core\/ft_apply.c core\/ft_atoi.c core\/ft_bzero.c core\/ft_calloc.c core\/ft_foreach.c core\/ft_isalnum.c core\/ft_isalpha.c core\/ft_isascii.c core\/ft_isdigit.c core\/ft_islower.c core\/ft_isprint.c core\/ft_isspace.c core\/ft_isupper.c core\/ft_itoa.c core\/ft_lstadd.c core\/ft_lstdel.c core\/ft_lstdelone.c core\/ft_lstiter.c core\/ft_lstmap.c core\/ft_lstnew.c core\/ft_malloc.c core\/ft_map.c core\/ft_memalloc.c core\/ft_memccpy.c core\/ft_memchr.c core\/ft_memcmp.c core\/ft_memcpy.c core\/ft_memdel.c core\/ft_memdup.c core\/ft_memmove.c core\/ft_memset.c core\/ft_memswap.c core\/ft_putchar.c core\/ft_putchar_fd.c core\/ft_putendl.c core\/ft_putendl_fd.c core\/ft_putnbr.c core\/ft_putnbr_fd.c core\/ft_putstr.c core\/ft_putstr_fd.c core\/ft_qsort.c core\/ft_rand.c core\/ft_realloc.c core\/ft_strcat.c core\/ft_strchr.c core\/ft_strclr.c core\/ft_strcmp.c core\/ft_strcpy.c core\/ft_strdel.c core\/ft_strdup.c core\/ft_strelems.c core\/ft_strequ.c core\/ft_striter.c core\/ft_striteri.c core\/ft_strjmp.c core\/ft_strjoin.c core\/ft_strlcat.c core\/ft_strlen.c core\/ft_strmap.c core\/ft_strmapi.c core\/ft_strncat.c core\/ft_strncmp.c core\/ft_strncpy.c core\/ft_strnequ.c core\/ft_strnew.c core\/ft_strnstr.c core\/ft_strrchr.c core\/ft_strsplit.c core\/ft_strspn.c core\/ft_strstr.c core\/ft_strsub.c core\/ft_strtrim.c core\/ft_tolower.c core\/ft_toupper.c core\/ft_umax.c core\/ft_umin.c core\/get_next_line.c vec\/vec_append.c vec\/vec_apply.c vec\/vec_bsearch.c vec\/vec_clear.c vec\/vec_clone.c vec\/vec_copy.c vec\/vec_count.c vec\/vec_create.c vec\/vec_extend.c vec\/vec_filter.c vec\/vec_free.c vec\/vec_get.c vec\/vec_import.c vec\/vec_index.c vec\/vec_insert.c vec\/vec_map.c vec\/vec_pop.c vec\/vec_remove.c vec\/vec_resize.c vec\/vec_reverse.c vec\/vec_search.c vec\/vec_set.c vec\/vec_sort.c vec\/vectorize.c $/;"	m
SRC	minilibx_macos/Makefile	/^SRC= mlx_shaders.c mlx_new_window.m mlx_init_loop.m mlx_new_image.m mlx_xpm.c mlx_int_str_to_wordtab.c$/;"	m
THREADS	include/fractol.h	/^# define THREADS	/;"	d
THREAD_FLAGS	Makefile	/^THREAD_FLAGS := -lpthread$/;"	m
UNIQ_BPP	minilibx_macos/mlx_int.h	/^#define UNIQ_BPP	/;"	d
USAGE	include/errors.h	/^# define USAGE	/;"	d
VALUE	include/fractol.h	/^# define VALUE	/;"	d
VEC_H	libft/include/vec.h	/^# define VEC_H$/;"	d
WFLAGS	Makefile	/^WFLAGS := -Wall -Wextra$/;"	m
WFLAGS	libft/Makefile	/^WFLAGS := -Wall -Wextra$/;"	m
WIN_HEIGHT	include/fractol.h	/^# define WIN_HEIGHT	/;"	d
WIN_WIDTH	include/fractol.h	/^# define WIN_WIDTH	/;"	d
appid	minilibx_macos/mlx_int.h	/^  void			*appid;$/;"	m	struct:mlx_ptr_s
bpp	include/fractol.h	/^	int				bpp;$/;"	m	struct:s_fractal
buffer	minilibx_macos/mlx_int.h	/^  char			*buffer;$/;"	m	struct:mlx_img_list_s
burning_ship	src/fractal.c	/^int		burning_ship(t_complex c, t_complex m, int max_iter)$/;"	f
bytes_per_pixel	minilibx_macos/font.c	/^  unsigned int 	 bytes_per_pixel; \/* 2:RGB16, 3:RGB, 4:RGBA *\/ $/;"	m	struct:__anon2	file:
change_colors	src/event.c	/^void	change_colors(t_fractal *fr, int keycode)$/;"	f
change_fractal	src/control.c	/^void	change_fractal(t_fractal *fr, int keycode)$/;"	f
choose_type	src/main.c	/^static void		choose_type(char *name, t_fractal *fractal)$/;"	f	file:
close_hook	src/control.c	/^int		close_hook(t_fractal *fr, int keycode)$/;"	f
col	minilibx_macos/mlx_xpm.c	/^  int           col;$/;"	m	struct:s_xpm_col	file:
color	include/fractol.h	/^	int				(*color)(double);$/;"	m	struct:s_fractal
color	minilibx_macos/mlx_xpm.c	/^  int   color;$/;"	m	struct:s_col_name	file:
color_bernstein	src/color.c	/^int				color_bernstein(double t)$/;"	f
color_grayscale	src/color.c	/^int				color_grayscale(double t)$/;"	f
color_hsv	src/color.c	/^int				color_hsv(double h)$/;"	f
content	libft/include/libft.h	/^	void			*content;$/;"	m	struct:s_list
content_size	libft/include/libft.h	/^	size_t			content_size;$/;"	m	struct:s_list
ctor	libft/include/vec.h	/^	void	(*ctor)(void *, const void *);$/;"	m	struct:__anon1
data	libft/include/vec.h	/^	void	*data;$/;"	m	struct:__anon1
display_log	minilibx_macos/mlx_shaders.c	/^void display_log(GLuint object, void (*param_func)(), void (*getlog_func)())$/;"	f
draw_thread	src/draw.c	/^void			draw_thread(void *fractal)$/;"	f
dtor	libft/include/vec.h	/^	void	(*dtor)(void *);$/;"	m	struct:__anon1
dumbsplit	libft/util/dumbsplit.py	/^def dumbsplit(source):$/;"	f
dx	include/fractol.h	/^	double			dx;$/;"	m	struct:s_param
dy	include/fractol.h	/^	double			dy;$/;"	m	struct:s_param
e_type	include/fractol.h	/^typedef enum		e_type {$/;"	g
endian	include/fractol.h	/^	int				endian;$/;"	m	struct:s_fractal
events_control	src/control.c	/^void	events_control(t_fractal *fr)$/;"	f
exit_err	src/errors.c	/^void	exit_err(int err_code)$/;"	f
find_list	libft/src/core/get_next_line.c	/^t_list	*find_list(t_list **head, int fd)$/;"	f
fix_julia	include/fractol.h	/^	bool			fix_julia;$/;"	m	struct:s_param
fix_julia	src/event.c	/^void	fix_julia(t_fractal *fr, int keycode)$/;"	f
font	minilibx_macos/mlx_int.h	/^  mlx_img_list_t	*font;$/;"	m	struct:mlx_ptr_s
font_atlas	minilibx_macos/font.c	/^} font_atlas = {$/;"	v	typeref:struct:__anon2	file:
font_fshader	minilibx_macos/mlx_int.h	/^  GLuint	font_fshader;$/;"	m	struct:glsl_info_s
font_program	minilibx_macos/mlx_int.h	/^  GLuint	font_program;$/;"	m	struct:glsl_info_s
font_vshader	minilibx_macos/mlx_int.h	/^  GLuint	font_vshader;$/;"	m	struct:glsl_info_s
fractal_init	src/main.c	/^void			fractal_init(char *name, t_fractal *fractal)$/;"	f
ft_apply	libft/src/core/ft_apply.c	/^void	ft_apply(void *data, size_t len, size_t size, void (*f)(void *))$/;"	f
ft_atoi	libft/src/core/ft_atoi.c	/^int		ft_atoi(const char *str)$/;"	f
ft_bzero	libft/src/core/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/src/core/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f
ft_count_w	libft/src/core/ft_strsplit.c	/^static size_t	ft_count_w(char const *s, char c)$/;"	f	file:
ft_del	libft/src/core/ft_lstmap.c	/^static void	ft_del(void *data, size_t size)$/;"	f	file:
ft_digit	libft/src/core/ft_itoa.c	/^static int	ft_digit(int n)$/;"	f	file:
ft_foreach	libft/src/core/ft_foreach.c	/^void	ft_foreach(int *tab, int length, void (*f)(int))$/;"	f
ft_isalnum	libft/src/core/ft_isalnum.c	/^int		ft_isalnum(int c)$/;"	f
ft_isalpha	libft/src/core/ft_isalpha.c	/^int		ft_isalpha(int c)$/;"	f
ft_isascii	libft/src/core/ft_isascii.c	/^int		ft_isascii(int c)$/;"	f
ft_isdigit	libft/src/core/ft_isdigit.c	/^int		ft_isdigit(int c)$/;"	f
ft_islower	libft/src/core/ft_islower.c	/^int		ft_islower(int c)$/;"	f
ft_isprint	libft/src/core/ft_isprint.c	/^int		ft_isprint(int c)$/;"	f
ft_isspace	libft/src/core/ft_isspace.c	/^int		ft_isspace(int c)$/;"	f
ft_isupper	libft/src/core/ft_isupper.c	/^int		ft_isupper(int c)$/;"	f
ft_itoa	libft/src/core/ft_itoa.c	/^char		*ft_itoa(int n)$/;"	f
ft_len	libft/src/core/ft_strsplit.c	/^static	size_t	ft_len(char const *s, char c)$/;"	f	file:
ft_lstadd	libft/src/core/ft_lstadd.c	/^void	ft_lstadd(t_list **alst, t_list *new)$/;"	f
ft_lstdel	libft/src/core/ft_lstdel.c	/^void	ft_lstdel(t_list **alst, void (*del)(void*, size_t))$/;"	f
ft_lstdelone	libft/src/core/ft_lstdelone.c	/^void	ft_lstdelone(t_list **alst, void (*del)(void*, size_t))$/;"	f
ft_lstiter	libft/src/core/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(t_list *elem))$/;"	f
ft_lstmap	libft/src/core/ft_lstmap.c	/^t_list		*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem))$/;"	f
ft_lstnew	libft/src/core/ft_lstnew.c	/^t_list	*ft_lstnew(void const *content, size_t content_size)$/;"	f
ft_malloc	libft/src/core/ft_malloc.c	/^void	*ft_malloc(size_t size)$/;"	f
ft_map	libft/src/core/ft_map.c	/^void	*ft_map(const void *data, size_t len, size_t size,$/;"	f
ft_memalloc	libft/src/core/ft_memalloc.c	/^void	*ft_memalloc(size_t size)$/;"	f
ft_memccpy	libft/src/core/ft_memccpy.c	/^void	*ft_memccpy(void *dst, const void *src, int c, size_t n)$/;"	f
ft_memchr	libft/src/core/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/src/core/ft_memcmp.c	/^int		ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/src/core/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memdel	libft/src/core/ft_memdel.c	/^void	*ft_memdel(void **ap)$/;"	f
ft_memdup	libft/src/core/ft_memdup.c	/^void	*ft_memdup(const void *s, size_t n)$/;"	f
ft_memmove	libft/src/core/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/src/core/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_memswap	libft/src/core/ft_memswap.c	/^void	ft_memswap(void *s1, void *s2, size_t size)$/;"	f
ft_putchar	libft/src/core/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f
ft_putchar_fd	libft/src/core/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl	libft/src/core/ft_putendl.c	/^void	ft_putendl(char const *s)$/;"	f
ft_putendl_fd	libft/src/core/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/;"	f
ft_putnbr	libft/src/core/ft_putnbr.c	/^void	ft_putnbr(int nb)$/;"	f
ft_putnbr_fd	libft/src/core/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	libft/src/core/ft_putstr.c	/^void	ft_putstr(char *s)$/;"	f
ft_putstr_fd	libft/src/core/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_qsort	libft/src/core/ft_qsort.c	/^void				ft_qsort(void *data, size_t len, size_t size,$/;"	f
ft_rand	libft/src/core/ft_rand.c	/^int		ft_rand(void)$/;"	f
ft_realloc	libft/src/core/ft_realloc.c	/^void	*ft_realloc(void *ptr, size_t new, size_t old)$/;"	f
ft_skip	libft/src/core/ft_strsplit.c	/^static	size_t	ft_skip(char const *s, char c)$/;"	f	file:
ft_srand	libft/src/core/ft_rand.c	/^void	ft_srand(int seed)$/;"	f
ft_strcat	libft/src/core/ft_strcat.c	/^char	*ft_strcat(char *s1, const char *s2)$/;"	f
ft_strchr	libft/src/core/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strclr	libft/src/core/ft_strclr.c	/^void	ft_strclr(char *s)$/;"	f
ft_strcmp	libft/src/core/ft_strcmp.c	/^int		ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strcpy	libft/src/core/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strdel	libft/src/core/ft_strdel.c	/^void	ft_strdel(char **as)$/;"	f
ft_strdup	libft/src/core/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strelems	libft/src/core/ft_strelems.c	/^size_t	ft_strelems(const char *s, int delim)$/;"	f
ft_strequ	libft/src/core/ft_strequ.c	/^int		ft_strequ(char const *s1, char const *s2)$/;"	f
ft_striter	libft/src/core/ft_striter.c	/^void	ft_striter(char *s, void (*f)(char*))$/;"	f
ft_striteri	libft/src/core/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f
ft_strjmp	libft/src/core/ft_strjmp.c	/^char	*ft_strjmp(char **s, int delim)$/;"	f
ft_strjoin	libft/src/core/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/src/core/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	libft/src/core/ft_strlen.c	/^size_t		ft_strlen(const char *s)$/;"	f
ft_strmap	libft/src/core/ft_strmap.c	/^char	*ft_strmap(char const *s, char (*f)(char))$/;"	f
ft_strmapi	libft/src/core/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncat	libft/src/core/ft_strncat.c	/^char	*ft_strncat(char *s1, const char *s2, size_t n)$/;"	f
ft_strncmp	libft/src/core/ft_strncmp.c	/^int		ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncpy	libft/src/core/ft_strncpy.c	/^char	*ft_strncpy(char *dst, const char *src, size_t len)$/;"	f
ft_strnequ	libft/src/core/ft_strnequ.c	/^int		ft_strnequ(char const *s1, char const *s2, size_t n)$/;"	f
ft_strnew	libft/src/core/ft_strnew.c	/^char	*ft_strnew(size_t size)$/;"	f
ft_strnstr	libft/src/core/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/src/core/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strsplit	libft/src/core/ft_strsplit.c	/^char			**ft_strsplit(char const *s, char c)$/;"	f
ft_strspn	libft/src/core/ft_strspn.c	/^size_t	ft_strspn(const char *s, const char *accept)$/;"	f
ft_strstr	libft/src/core/ft_strstr.c	/^char	*ft_strstr(const char *haystack, const char *needle)$/;"	f
ft_strsub	libft/src/core/ft_strsub.c	/^char	*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f
ft_strtrim	libft/src/core/ft_strtrim.c	/^char	*ft_strtrim(char const *s)$/;"	f
ft_tolower	libft/src/core/ft_tolower.c	/^int		ft_tolower(int c)$/;"	f
ft_toupper	libft/src/core/ft_toupper.c	/^int		ft_toupper(int c)$/;"	f
ft_umax	libft/src/core/ft_umax.c	/^uintmax_t	ft_umax(uintmax_t a, uintmax_t b)$/;"	f
ft_umin	libft/src/core/ft_umin.c	/^uintmax_t	ft_umin(uintmax_t a, uintmax_t b)$/;"	f
func	include/fractol.h	/^	int				(*func)(t_complex, t_complex, int);$/;"	m	struct:s_param
func_t	minilibx_macos/mlx_int.h	/^typedef int (*func_t)();$/;"	t
g_seed	libft/src/core/ft_rand.c	/^static unsigned g_seed;$/;"	v	file:
get_complex	src/draw.c	/^t_complex		get_complex(int x, int y, t_param *fr)$/;"	f
get_next_line	libft/src/core/get_next_line.c	/^int		get_next_line(const int fd, char **line)$/;"	f
glsl_info_s	minilibx_macos/mlx_int.h	/^typedef struct	glsl_info_s$/;"	s
glsl_info_t	minilibx_macos/mlx_int.h	/^} glsl_info_t;$/;"	t	typeref:struct:glsl_info_s
go_read_smth	libft/src/core/get_next_line.c	/^int		go_read_smth(char **tail, int fd)$/;"	f
height	minilibx_macos/font.c	/^  unsigned int 	 height;$/;"	m	struct:__anon2	file:
height	minilibx_macos/mlx_int.h	/^  int			height;$/;"	m	struct:mlx_img_list_s
im	include/fractol.h	/^	double			im;$/;"	m	struct:s_complex
image	include/fractol.h	/^	void			*image;$/;"	m	struct:s_fractal
image_fshader	minilibx_macos/mlx_int.h	/^  GLuint	image_fshader;$/;"	m	struct:glsl_info_s
image_program	minilibx_macos/mlx_int.h	/^  GLuint	image_program;$/;"	m	struct:glsl_info_s
image_vshader	minilibx_macos/mlx_int.h	/^  GLuint	image_vshader;$/;"	m	struct:glsl_info_s
img	minilibx_macos/mlx_int.h	/^  mlx_img_list_t	*img;$/;"	m	struct:mlx_img_ctx_s
img_list	minilibx_macos/mlx_int.h	/^  mlx_img_ctx_t		*img_list;$/;"	m	struct:mlx_win_list_s
img_list	minilibx_macos/mlx_int.h	/^  mlx_img_list_t	*img_list;$/;"	m	struct:mlx_ptr_s
img_ptr	include/fractol.h	/^	int				*img_ptr;$/;"	m	struct:s_fractal
item_size	libft/include/vec.h	/^	size_t	item_size;$/;"	m	struct:__anon1
julia	src/fractal.c	/^int		julia(t_complex c, t_complex m, int max_iter)$/;"	f
key_hook	src/control.c	/^int		key_hook(int keycode, t_fractal *fr)$/;"	f
line_size	include/fractol.h	/^	int				line_size;$/;"	m	struct:s_fractal
loc_font_atlassize	minilibx_macos/mlx_int.h	/^  GLint		loc_font_atlassize;$/;"	m	struct:glsl_info_s
loc_font_color	minilibx_macos/mlx_int.h	/^  GLint		loc_font_color;$/;"	m	struct:glsl_info_s
loc_font_posinatlas	minilibx_macos/mlx_int.h	/^  GLint		loc_font_posinatlas;$/;"	m	struct:glsl_info_s
loc_font_posinwin	minilibx_macos/mlx_int.h	/^  GLint		loc_font_posinwin;$/;"	m	struct:glsl_info_s
loc_font_position	minilibx_macos/mlx_int.h	/^  GLint		loc_font_position;$/;"	m	struct:glsl_info_s
loc_font_texture	minilibx_macos/mlx_int.h	/^  GLint		loc_font_texture;$/;"	m	struct:glsl_info_s
loc_font_winhalfsize	minilibx_macos/mlx_int.h	/^  GLint		loc_font_winhalfsize;$/;"	m	struct:glsl_info_s
loc_image_pos	minilibx_macos/mlx_int.h	/^  GLint		loc_image_pos;$/;"	m	struct:glsl_info_s
loc_image_position	minilibx_macos/mlx_int.h	/^  GLint		loc_image_position;$/;"	m	struct:glsl_info_s
loc_image_size	minilibx_macos/mlx_int.h	/^  GLint		loc_image_size;$/;"	m	struct:glsl_info_s
loc_image_texture	minilibx_macos/mlx_int.h	/^  GLint		loc_image_texture;$/;"	m	struct:glsl_info_s
loc_image_winhalfsize	minilibx_macos/mlx_int.h	/^  GLint		loc_image_winhalfsize;$/;"	m	struct:glsl_info_s
loc_pixel_position	minilibx_macos/mlx_int.h	/^  GLint		loc_pixel_position;$/;"	m	struct:glsl_info_s
loc_pixel_texture	minilibx_macos/mlx_int.h	/^  GLint		loc_pixel_texture;$/;"	m	struct:glsl_info_s
loc_pixel_winhalfsize	minilibx_macos/mlx_int.h	/^  GLint		loc_pixel_winhalfsize;$/;"	m	struct:glsl_info_s
lomuto	libft/src/core/ft_qsort.c	/^static inline void	*lomuto(void *left, void *right, size_t size,$/;"	f	file:
loop_hook	minilibx_macos/mlx_int.h	/^  void			(*loop_hook)(void *);$/;"	m	struct:mlx_ptr_s
loop_hook_data	minilibx_macos/mlx_int.h	/^  void			*loop_hook_data;$/;"	m	struct:mlx_ptr_s
loop_timer	minilibx_macos/mlx_int.h	/^  void			*loop_timer;$/;"	m	struct:mlx_ptr_s
m	include/fractol.h	/^	t_complex		m;$/;"	m	struct:s_param
main	src/main.c	/^int				main(int argc, char **argv)$/;"	f
main_loop_active	minilibx_macos/mlx_int.h	/^  int			main_loop_active;$/;"	m	struct:mlx_ptr_s
mandelbar	src/fractal.c	/^int		mandelbar(t_complex c, t_complex m, int max_iter)$/;"	f
mandelbrot	src/fractal.c	/^int		mandelbrot(t_complex c, t_complex m, int max_iter)$/;"	f
max_iter	include/fractol.h	/^	int				max_iter;$/;"	m	struct:s_param
max_size	libft/include/vec.h	/^	ssize_t	max_size;$/;"	m	struct:__anon1
mlx	include/fractol.h	/^	void			*mlx;$/;"	m	struct:s_fractal
mlx_col_name	minilibx_macos/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name
mlx_img_ctx_s	minilibx_macos/mlx_int.h	/^typedef struct	mlx_img_ctx_s$/;"	s
mlx_img_ctx_t	minilibx_macos/mlx_int.h	/^} mlx_img_ctx_t;$/;"	t	typeref:struct:mlx_img_ctx_s
mlx_img_list_s	minilibx_macos/mlx_int.h	/^typedef struct	mlx_img_list_s$/;"	s
mlx_img_list_t	minilibx_macos/mlx_int.h	/^} mlx_img_list_t;$/;"	t	typeref:struct:mlx_img_list_s
mlx_int_file_get_rid_comment	minilibx_macos/mlx_xpm.c	/^void	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f
mlx_int_get_col_name	minilibx_macos/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f
mlx_int_get_line	minilibx_macos/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f
mlx_int_get_text_rgb	minilibx_macos/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f
mlx_int_parse_xpm	minilibx_macos/mlx_xpm.c	/^void	*mlx_int_parse_xpm(mlx_ptr_t *xvar,void *info,int info_size,char *(*f)())$/;"	f
mlx_int_static_line	minilibx_macos/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f
mlx_int_str_str	minilibx_macos/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f
mlx_int_str_str_cote	minilibx_macos/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f
mlx_int_str_to_wordtab	minilibx_macos/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f
mlx_int_xpm_set_pixel	minilibx_macos/mlx_xpm.c	/^void	mlx_int_xpm_set_pixel(mlx_img_list_t *img, char *data, int opp, int col, int x)$/;"	f
mlx_ptr_s	minilibx_macos/mlx_int.h	/^typedef struct		mlx_ptr_s$/;"	s
mlx_ptr_t	minilibx_macos/mlx_int.h	/^} mlx_ptr_t;$/;"	t	typeref:struct:mlx_ptr_s
mlx_shaders	minilibx_macos/mlx_shaders.c	/^int mlx_shaders(glsl_info_t *glsl)$/;"	f
mlx_shaders_font	minilibx_macos/mlx_shaders.c	/^int mlx_shaders_font(glsl_info_t *glsl)$/;"	f
mlx_shaders_image	minilibx_macos/mlx_shaders.c	/^int mlx_shaders_image(glsl_info_t *glsl)$/;"	f
mlx_shaders_pixel	minilibx_macos/mlx_shaders.c	/^int mlx_shaders_pixel(glsl_info_t *glsl)$/;"	f
mlx_win_list_s	minilibx_macos/mlx_int.h	/^typedef struct	mlx_win_list_s$/;"	s
mlx_win_list_t	minilibx_macos/mlx_int.h	/^} mlx_win_list_t;$/;"	t	typeref:struct:mlx_win_list_s
mlx_xpm_file_to_image	minilibx_macos/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(mlx_ptr_t *xvar,char *file,int *width,int *height)$/;"	f
mlx_xpm_to_image	minilibx_macos/mlx_xpm.c	/^void	*mlx_xpm_to_image(mlx_ptr_t *xvar,char **xpm_data,int *width,int *height)$/;"	f
modify_iter	src/event.c	/^void	modify_iter(t_fractal *fr, int keycode)$/;"	f
mouse_move	src/mouse.c	/^int		mouse_move(int x, int y, t_fractal *fr)$/;"	f
mouse_pressed	src/mouse.c	/^int		mouse_pressed(int button, int x, int y, t_fractal *fr)$/;"	f
move_im	src/event.c	/^void	move_im(t_fractal *fr, int keycode)$/;"	f
move_re	src/event.c	/^void	move_re(t_fractal *fr, int keycode)$/;"	f
name	include/fractol.h	/^	t_type			name;$/;"	m	struct:s_fractal
name	minilibx_macos/mlx_xpm.c	/^  char  *name;$/;"	m	struct:s_col_name	file:
name	minilibx_macos/mlx_xpm.c	/^  int           name;$/;"	m	struct:s_xpm_col	file:
nb_flush	minilibx_macos/mlx_int.h	/^  int			nb_flush;$/;"	m	struct:mlx_win_list_s
next	libft/include/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	minilibx_macos/mlx_int.h	/^  struct mlx_img_ctx_s	*next;$/;"	m	struct:mlx_img_ctx_s	typeref:struct:mlx_img_ctx_s::mlx_img_ctx_s
next	minilibx_macos/mlx_int.h	/^  struct mlx_img_list_s	*next;$/;"	m	struct:mlx_img_list_s	typeref:struct:mlx_img_list_s::mlx_img_list_s
next	minilibx_macos/mlx_int.h	/^  struct mlx_win_list_s	*next;$/;"	m	struct:mlx_win_list_s	typeref:struct:mlx_win_list_s::mlx_win_list_s
none	libft/include/vec.h	/^	t_obj	none;$/;"	m	struct:__anon1
ocean	src/fractal_bonus.c	/^int		ocean(t_complex c, t_complex m, int max_iter)$/;"	f
param	include/fractol.h	/^	t_param			param;$/;"	m	struct:s_fractal
path	libft/util/dumbsplit.py	/^from os import path$/;"	i
phoenix	src/fractal.c	/^int		phoenix(t_complex c, t_complex m, int max_iter)$/;"	f
pixel_data	minilibx_macos/font.c	/^  unsigned char	 pixel_data[1140 * 20 * 4 + 1];$/;"	m	struct:__anon2	file:
pixel_fshader	minilibx_macos/mlx_int.h	/^  GLuint	pixel_fshader;$/;"	m	struct:glsl_info_s
pixel_program	minilibx_macos/mlx_int.h	/^  GLuint	pixel_program;$/;"	m	struct:glsl_info_s
pixel_vshader	minilibx_macos/mlx_int.h	/^  GLuint	pixel_vshader;$/;"	m	struct:glsl_info_s
pixmgt	minilibx_macos/mlx_int.h	/^  int			pixmgt;$/;"	m	struct:mlx_win_list_s
put_pixel	src/draw.c	/^static void		put_pixel(t_fractal *fr, int x, int y, int color)$/;"	f	file:
quick_sort	libft/src/core/ft_qsort.c	/^static void			quick_sort(void *left, void *right, size_t size,$/;"	f	file:
re	include/fractol.h	/^	double			re;$/;"	m	struct:s_complex
re	libft/util/dumbsplit.py	/^import re$/;"	i
reset	src/control.c	/^void	reset(t_fractal *fr, int keycode)$/;"	f
s_col_name	minilibx_macos/mlx_xpm.c	/^struct  s_col_name$/;"	s	file:
s_complex	include/fractol.h	/^typedef struct		s_complex {$/;"	s
s_fractal	include/fractol.h	/^typedef struct		s_fractal {$/;"	s
s_list	libft/include/libft.h	/^typedef struct		s_list$/;"	s
s_param	include/fractol.h	/^typedef struct		s_param {$/;"	s
s_xpm_col	minilibx_macos/mlx_xpm.c	/^typedef struct  s_xpm_col$/;"	s	file:
size	libft/include/vec.h	/^	ssize_t	size;$/;"	m	struct:__anon1
sys	libft/util/dumbsplit.py	/^import sys$/;"	i
t_colormap	include/key.h	/^typedef int		(*t_colormap)(double);$/;"	t
t_complex	include/fractol.h	/^}					t_complex;$/;"	t	typeref:struct:s_complex
t_fractal	include/fractol.h	/^}					t_fractal;$/;"	t	typeref:struct:s_fractal
t_list	libft/include/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_obj	libft/include/vec.h	/^typedef void *	t_obj;$/;"	t
t_param	include/fractol.h	/^}					t_param;$/;"	t	typeref:struct:s_param
t_shortcut	include/key.h	/^typedef void	(*t_shortcut)(t_fractal *, int);$/;"	t
t_type	include/fractol.h	/^}					t_type;$/;"	t	typeref:enum:e_type
t_vec	libft/include/vec.h	/^}	t_vec;$/;"	t	typeref:struct:__anon1
t_xpm_col	minilibx_macos/mlx_xpm.c	/^} t_xpm_col;$/;"	t	typeref:struct:s_xpm_col	file:
tail_to_line	libft/src/core/get_next_line.c	/^int		tail_to_line(char **tail, char **line)$/;"	f
texture	minilibx_macos/mlx_int.h	/^  GLuint		texture;$/;"	m	struct:mlx_img_ctx_s
thread_id	include/fractol.h	/^	int				thread_id;$/;"	m	struct:s_fractal
thread_init	src/draw.c	/^void			thread_init(t_fractal *fr)$/;"	f
vbuffer	minilibx_macos/mlx_int.h	/^  GLuint		vbuffer;$/;"	m	struct:mlx_img_ctx_s
vec_append	libft/src/vec/vec_append.c	/^void	*vec_append(t_vec *v, const void *object)$/;"	f
vec_apply	libft/src/vec/vec_apply.c	/^void	vec_apply(t_vec *v, void (*f)(void *))$/;"	f
vec_bsearch	libft/src/vec/vec_bsearch.c	/^void	*vec_bsearch(const t_vec *v, const void *object,$/;"	f
vec_clear	libft/src/vec/vec_clear.c	/^void	vec_clear(t_vec *v)$/;"	f
vec_clone	libft/src/vec/vec_clone.c	/^t_vec	*vec_clone(const t_vec *v)$/;"	f
vec_copy	libft/src/vec/vec_copy.c	/^void	vec_copy(t_vec *v, const t_vec *u)$/;"	f
vec_count	libft/src/vec/vec_count.c	/^size_t	vec_count(const t_vec *v, const void *object)$/;"	f
vec_create	libft/src/vec/vec_create.c	/^t_vec	*vec_create(size_t size, size_t item_size)$/;"	f
vec_extend	libft/src/vec/vec_extend.c	/^t_vec	*vec_extend(t_vec *v, const t_vec *u)$/;"	f
vec_filter	libft/src/vec/vec_filter.c	/^t_vec	*vec_filter(const t_vec *v, bool (*f)(const void *))$/;"	f
vec_free	libft/src/vec/vec_free.c	/^void	vec_free(t_vec *v)$/;"	f
vec_get	libft/src/vec/vec_get.c	/^void	*vec_get(const t_vec *v, ssize_t index)$/;"	f
vec_import	libft/src/vec/vec_import.c	/^t_vec	*vec_import(const char *s, int delim, size_t item_size,$/;"	f
vec_index	libft/src/vec/vec_index.c	/^ssize_t	vec_index(const t_vec *v, const void *object)$/;"	f
vec_insert	libft/src/vec/vec_insert.c	/^void	*vec_insert(t_vec *v, ssize_t index, const void *object)$/;"	f
vec_map	libft/src/vec/vec_map.c	/^t_vec	*vec_map(const t_vec *v, void (*f)(void *))$/;"	f
vec_pop	libft/src/vec/vec_pop.c	/^void	*vec_pop(t_vec *v, ssize_t index)$/;"	f
vec_remove	libft/src/vec/vec_remove.c	/^void	*vec_remove(t_vec *v, ssize_t index)$/;"	f
vec_resize	libft/src/vec/vec_resize.c	/^void	*vec_resize(t_vec *v, ssize_t size)$/;"	f
vec_reverse	libft/src/vec/vec_reverse.c	/^void	vec_reverse(t_vec *v)$/;"	f
vec_search	libft/src/vec/vec_search.c	/^void	*vec_search(const t_vec *v, const void *object)$/;"	f
vec_set	libft/src/vec/vec_set.c	/^void	*vec_set(t_vec *v, ssize_t index, const void *object)$/;"	f
vec_sort	libft/src/vec/vec_sort.c	/^void	vec_sort(t_vec *v, int (*cmp)(const void *, const void *))$/;"	f
vectorize	libft/src/vec/vectorize.c	/^t_vec	vectorize(void *data, size_t size, size_t item_size)$/;"	f
vertexes	minilibx_macos/mlx_int.h	/^  GLfloat		vertexes[8];$/;"	m	struct:mlx_img_list_s
width	minilibx_macos/font.c	/^  unsigned int 	 width;$/;"	m	struct:__anon2	file:
width	minilibx_macos/mlx_int.h	/^  int			width;$/;"	m	struct:mlx_img_list_s
win_list	minilibx_macos/mlx_int.h	/^  mlx_win_list_t	*win_list;$/;"	m	struct:mlx_ptr_s
window	include/fractol.h	/^	void			*window;$/;"	m	struct:s_fractal
winid	minilibx_macos/mlx_int.h	/^  void			*winid;$/;"	m	struct:mlx_win_list_s
x_max	include/fractol.h	/^	double			x_max;$/;"	m	struct:s_param
x_min	include/fractol.h	/^	double			x_min;$/;"	m	struct:s_param
y_max	include/fractol.h	/^	double			y_max;$/;"	m	struct:s_param
y_min	include/fractol.h	/^	double			y_min;$/;"	m	struct:s_param
zoom	src/mouse.c	/^void	zoom(t_param *p, int x, int y, double factor)$/;"	f
